(function (React$1, ReactDOM, d3) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const csvUrl ='https://gist.githubusercontent.com/mbdev3/5afb40dbdcd3d75d69dd38b9d61bbb11/raw/3b771570b7278d39e8c6c54148a2ac602019e09b/wpp2020.csv';

  const useData = ()=>{
  const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      const row = (d) => {
        d.population = +d['2020'] *1000;
        return d;
      };
      d3.csv(csvUrl, row).then((data) => {
        setData(data.slice(0, 10));
      });
    }, []);
  return data
  };

  const AxisBottom = ({
    xScale,
    innerHeight,
    tickFormat
  }) =>
    xScale.ticks().map((tickValue) => (
      React.createElement( 'g', { className: "tick", key: tickValue, transform: `translate(${xScale(
        tickValue
      )},0)` },
        React.createElement( 'line', { y2: innerHeight }),
        React.createElement( 'text', {
          style: { textAnchor: 'middle' }, y: innerHeight + 5, dy: "0.71rem" },
          tickFormat(tickValue)
        )
      )
    ));

  const AxisLeft = ({yScale}) => yScale.domain().map((tickValue) => (
            
              React.createElement( 'g', { className: "tick" },
              React.createElement( 'text', {
                key: tickValue, style: { textAnchor: 'end' }, x: -5, dy: ".32em", y: yScale(tickValue)+yScale.bandwidth()/2 },
                tickValue
              )
      )
            
          ));

  const Marks = ({data,yScale,xScale,xValue,yValue,tooltipFormat}) => data.map((d) => (
            React.createElement( 'rect', { className: 'mark', key: yValue(d), x: 0, y: yScale(yValue(d)), width: xScale(xValue(d)), height: yScale.bandwidth() },
    
      React.createElement( 'title', null, tooltipFormat(xValue(d)) )
    )
          ));

  const width = window.innerWidth;
  const height = window.innerHeight;
  const margin = {
    top: 20,
    bottom: 60,
    right: 30,
    left: 200,
  };

  const App = () => {
    const data = useData();
    if (!data) {
      return React$1__default.createElement( 'pre', null, "loading.." );
    }
    const xValue = (d) => d.population;
    const yValue = (d) => d.country;
    const innerHeight =
      height - margin.top - margin.bottom;
    const innerWidth =
      width - margin.right - margin.left;
    const yScale = d3.scaleBand()
      .domain(data.map(yValue))
      .range([0, innerHeight])
      .paddingInner(0.1);
    const xScale = d3.scaleLinear()
      .domain([0, d3.max(data, xValue)])
      .range([0, innerWidth]);
    const dy = innerHeight / data.length / 2;
    console.log(dy);
    const siFormat = d3.format('.2s');
  const xAxisTickFormat = tickValue=>siFormat(tickValue).replace('G','B');
  const tooltipFormat = tickValue=>d3.format(",.2r")(tickValue).replace('G','B');
    return (
      React$1__default.createElement( 'svg', { width: width, height: height },
        React$1__default.createElement( 'g', {
          transform: `translate(${margin.left},${margin.top})` },
          React$1__default.createElement( AxisBottom, {
            innerHeight: innerHeight, xScale: xScale, tickFormat: xAxisTickFormat }),
          React$1__default.createElement( AxisLeft, { yScale: yScale }),
          React$1__default.createElement( 'text', {
            className: "label", textAnchor: "middle", x: innerWidth / 2, y: height - margin.bottom / 2 }, "Population"),
          React$1__default.createElement( Marks, {
            data: data, xScale: xScale, yScale: yScale, xValue: xValue, yValue: yValue, tooltipFormat: tooltipFormat })
        )
      )
    );
  };

  const rootElement = document.getElementById(
    'root'
  );
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,